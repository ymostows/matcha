import dotenv from 'dotenv';
dotenv.config();

import { UserModel } from '../models/User';
import { ProfileModel } from '../models/Profile';
import pool from '../config/database';
import crypto from 'crypto';
import fetch from 'node-fetch';

// Configuration pour les API d'images AI
const AI_IMAGE_SERVICES = {
  // Service gratuit avec des visages g√©n√©r√©s par IA
  GENERATED_PHOTOS: 'https://api.generated.photos/api/v1/faces',
  // Service THIS PERSON DOES NOT EXIST
  THISPERSONDOESNOTEXIST: 'https://thispersondoesnotexist.com/image',
  // Service RoboHash pour des avatars stylis√©s
  ROBOHASH: 'https://robohash.org',
  // Service UI Avatars
  UI_AVATARS: 'https://ui-avatars.com/api',
  // Service Picsum pour des photos de profil
  PICSUM: 'https://picsum.photos'
};

// Cl√©s API (remplacez par vos vraies cl√©s si disponibles)
const API_KEYS = {
  GENERATED_PHOTOS: process.env.GENERATED_PHOTOS_API_KEY || '',
  UNSPLASH: process.env.UNSPLASH_ACCESS_KEY || ''
};

// Fonction pour obtenir une photo depuis ThisPersonDoesNotExist
async function getThisPersonDoesNotExistPhoto(): Promise<string> {
  try {
    const response = await fetch(`${AI_IMAGE_SERVICES.THISPERSONDOESNOTEXIST}?${Date.now()}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const buffer = await response.buffer();
    const base64 = buffer.toString('base64');
    
    return `data:image/jpeg;base64,${base64}`;
  } catch (error) {
    console.error('Erreur ThisPersonDoesNotExist:', error);
    throw error;
  }
}

// Fonction pour obtenir une photo depuis Generated Photos (avec genre)
async function getGeneratedPhoto(gender: 'homme' | 'femme', age: number): Promise<string> {
  try {
    const genderParam = gender === 'homme' ? 'male' : 'female';
    const ageGroup = age < 25 ? 'young-adult' : age < 40 ? 'adult' : 'middle-aged';
    
    // URL avec param√®tres pour Generated Photos
    const url = `${AI_IMAGE_SERVICES.GENERATED_PHOTOS}?gender=${genderParam}&age=${ageGroup}&order_by=random&per_page=1`;
    
    const headers: any = {
      'Authorization': `API-Key ${API_KEYS.GENERATED_PHOTOS}`,
      'Content-Type': 'application/json'
    };
    
    const response = await fetch(url, { headers });
    
    if (!response.ok) {
      throw new Error(`Generated Photos API error! status: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.faces && data.faces.length > 0) {
      const imageUrl = data.faces[0].urls.find((u: any) => u.size === 512)?.url || data.faces[0].urls[0]?.url;
      
      if (imageUrl) {
        const imageResponse = await fetch(imageUrl);
        const buffer = await imageResponse.buffer();
        const base64 = buffer.toString('base64');
        
        return `data:image/jpeg;base64,${base64}`;
      }
    }
    
    throw new Error('Aucune image trouv√©e dans la r√©ponse');
  } catch (error) {
    console.error('Erreur Generated Photos:', error);
    throw error;
  }
}

// Fonction pour obtenir une photo depuis UI Avatars (fallback)
async function getUIAvatarPhoto(firstName: string, lastName: string, gender: 'homme' | 'femme'): Promise<string> {
  try {
    const initials = `${firstName.charAt(0)}${lastName.charAt(0)}`;
    const backgroundColor = gender === 'homme' ? '007bff' : 'dc3545';
    
    const url = `${AI_IMAGE_SERVICES.UI_AVATARS}/?name=${initials}&size=400&background=${backgroundColor}&color=fff&format=png`;
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`UI Avatars error! status: ${response.status}`);
    }
    
    const buffer = await response.buffer();
    const base64 = buffer.toString('base64');
    
    return `data:image/png;base64,${base64}`;
  } catch (error) {
    console.error('Erreur UI Avatars:', error);
    throw error;
  }
}

// Fonction pour obtenir des photos de Picsum (photos r√©elles vari√©es)
async function getPicsumPhoto(seed: string): Promise<string> {
  try {
    const url = `${AI_IMAGE_SERVICES.PICSUM}/400/500?random=${seed}`;
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Picsum error! status: ${response.status}`);
    }
    
    const buffer = await response.buffer();
    const base64 = buffer.toString('base64');
    
    return `data:image/jpeg;base64,${base64}`;
  } catch (error) {
    console.error('Erreur Picsum:', error);
    throw error;
  }
}

// Fonction principale pour obtenir une photo de profil
async function getProfilePhoto(firstName: string, lastName: string, gender: 'homme' | 'femme', age: number, attempt: number = 0): Promise<string> {
  const methods = [
    () => getThisPersonDoesNotExistPhoto(),
    () => getGeneratedPhoto(gender, age),
    () => getPicsumPhoto(`${firstName}-${lastName}-${Date.now()}-${attempt}`),
    () => getUIAvatarPhoto(firstName, lastName, gender)
  ];
  
  // Essayer chaque m√©thode jusqu'√† ce qu'une fonctionne
  for (let i = 0; i < methods.length; i++) {
    try {
      console.log(`üì∏ Tentative ${i + 1}/4 pour obtenir une photo...`);
      const photo = await methods[i]();
      console.log(`‚úÖ Photo obtenue avec la m√©thode ${i + 1}`);
      return photo;
    } catch (error) {
      console.warn(`‚ö†Ô∏è M√©thode ${i + 1} √©chou√©e:`, error.message);
      if (i === methods.length - 1) {
        throw new Error('Toutes les m√©thodes de g√©n√©ration de photos ont √©chou√©');
      }
    }
  }
  
  throw new Error('Impossible d\'obtenir une photo');
}

// Fonction pour cr√©er plusieurs photos pour un profil
async function createMultiplePhotos(userId: number, firstName: string, lastName: string, gender: 'homme' | 'femme', age: number, count: number = 3): Promise<void> {
  const client = await pool.connect();
  
  try {
    for (let i = 0; i < count; i++) {
      try {
        console.log(`üì∏ G√©n√©ration photo ${i + 1}/${count} pour ${firstName} ${lastName}...`);
        
        const imageData = await getProfilePhoto(firstName, lastName, gender, age, i);
        const filename = `ai-profile-${userId}-${i}-${Date.now()}.jpg`;
        const isProfilePicture = i === 0;
        
        await client.query(
          'INSERT INTO photos (user_id, filename, image_data, is_profile_picture) VALUES ($1, $2, $3, $4)',
          [userId, filename, imageData, isProfilePicture]
        );
        
        console.log(`‚úÖ Photo ${i + 1}/${count} ajout√©e`);
        
        // Attendre entre chaque photo pour √©viter les limitations d'API
        await new Promise(resolve => setTimeout(resolve, 1500));
      } catch (error) {
        console.error(`‚ùå Erreur photo ${i + 1}:`, error);
      }
    }
  } finally {
    client.release();
  }
}

// Fonction pour cr√©er des profils avec photos AI
async function generateAIProfiles(count: number = 10): Promise<void> {
  console.log(`ü§ñ G√©n√©ration de ${count} profils avec photos AI de haute qualit√©...`);
  
  // Donn√©es pour g√©n√©rer des profils vari√©s
  const NAMES = {
    homme: [
      { first: 'Alexandre', last: 'Dubois' },
      { first: 'Baptiste', last: 'Martin' },
      { first: 'Cl√©ment', last: 'Leroy' },
      { first: 'Damien', last: 'Bernard' },
      { first: '√âmile', last: 'Petit' },
      { first: 'Fabien', last: 'Durand' },
      { first: 'Gabriel', last: 'Moreau' },
      { first: 'Hugo', last: 'Simon' },
      { first: 'Julien', last: 'Laurent' },
      { first: 'Lucas', last: 'Michel' }
    ],
    femme: [
      { first: 'Am√©lie', last: 'Garcia' },
      { first: 'Camille', last: 'Roux' },
      { first: 'Charlotte', last: 'Vincent' },
      { first: '√âmilie', last: 'Fournier' },
      { first: 'Emma', last: 'Morel' },
      { first: 'Jade', last: 'Girard' },
      { first: 'L√©a', last: 'Bonnet' },
      { first: 'Manon', last: 'Fran√ßois' },
      { first: 'Marie', last: 'Mercier' },
      { first: 'Zo√©', last: 'Dupont' }
    ]
  };
  
  const INTERESTS = [
    'üéµ Musique', 'üé¨ Cin√©ma', 'üìö Lecture', 'üèÉ‚Äç‚ôÇÔ∏è Sport', 'üé® Art',
    'üç≥ Cuisine', '‚úàÔ∏è Voyages', 'üì∏ Photographie', 'üé≠ Th√©√¢tre', 'üèä‚Äç‚ôÄÔ∏è Natation',
    'üö¥‚Äç‚ôÇÔ∏è Cyclisme', 'üèîÔ∏è Randonn√©e', 'üé∏ Musique', 'üíÉ Danse', 'üßò‚Äç‚ôÄÔ∏è Yoga',
    'üå± Jardinage', 'üêï Animaux', 'üç∑ ≈ínologie', 'üéÆ Gaming', 'üî¨ Sciences'
  ];
  
  const CITIES = [
    'Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nice', 'Nantes', 'Strasbourg',
    'Montpellier', 'Bordeaux', 'Lille', 'Rennes', 'Grenoble', 'Dijon'
  ];
  
  const BIOS = {
    homme: [
      "Passionn√© de voyages et de d√©couvertes, j'aime partager des moments authentiques.",
      "Amateur de sport et de bonne cuisine, toujours pr√™t pour de nouvelles aventures.",
      "Cr√©atif dans l'√¢me, entre art et musique, je cherche l'√¢me s≈ìur.",
      "√âpicurien et optimiste, j'adore les discussions profondes autour d'un bon verre.",
      "Sportif et aventurier, j'aime explorer le monde et rencontrer de nouvelles personnes."
    ],
    femme: [
      "Amoureuse de la vie et des petits bonheurs, je cherche quelqu'un pour les partager.",
      "Cr√©ative et p√©tillante, entre art et nature, j'aime les belles rencontres.",
      "Passionn√©e de culture et de voyages, toujours curieuse de d√©couvrir.",
      "√âpicurienne et authentique, j'adore les moments simples et vrais.",
      "Aventuri√®re dans l'√¢me, j'aime les d√©fis et les nouvelles exp√©riences."
    ]
  };
  
  try {
    for (let i = 0; i < count; i++) {
      const gender = Math.random() > 0.5 ? 'homme' : 'femme';
      const nameIndex = Math.floor(Math.random() * NAMES[gender].length);
      const { first: firstName, last: lastName } = NAMES[gender][nameIndex];
      
      const username = `${firstName.toLowerCase()}.${lastName.toLowerCase()}${Math.floor(Math.random() * 100)}`;
      const email = `${username}@example.com`;
      const age = Math.floor(Math.random() * 20) + 22; // 22-41 ans
      
      console.log(`\nüë§ Profil ${i + 1}/${count}: ${firstName} ${lastName} (${gender}, ${age} ans)`);
      
      try {
        // Cr√©er l'utilisateur
        const user = await UserModel.create({
          email,
          username,
          password: 'TempPassword123!',
          first_name: firstName,
          last_name: lastName
        });
        
        // V√©rifier l'utilisateur
        await UserModel.verifyAccount(user.verification_token!);
        
        // G√©n√©rer des int√©r√™ts
        const shuffledInterests = [...INTERESTS].sort(() => 0.5 - Math.random());
        const userInterests = shuffledInterests.slice(0, Math.floor(Math.random() * 4) + 3);
        
        // Cr√©er le profil
        const bio = BIOS[gender][Math.floor(Math.random() * BIOS[gender].length)];
        const city = CITIES[Math.floor(Math.random() * CITIES.length)];
        
        const profileData = {
          biography: bio,
          age,
          gender,
          sexual_orientation: Math.random() > 0.8 ? 'bi' : (Math.random() > 0.15 ? 'hetero' : 'homo'),
          interests: userInterests,
          city
        };
        
        await ProfileModel.createOrUpdate(user.id, profileData);
        
        // G√©n√©rer des coordonn√©es GPS autour de Paris
        const parisLat = 48.8566;
        const parisLng = 2.3522;
        const lat = parisLat + (Math.random() - 0.5) * 0.5;
        const lng = parisLng + (Math.random() - 0.5) * 0.5;
        
        await pool.query(
          'UPDATE profiles SET location_lat = $1, location_lng = $2 WHERE user_id = $3',
          [lat, lng, user.id]
        );
        
        console.log(`‚úÖ Profil cr√©√©: ${firstName} ${lastName} √† ${city}`);
        console.log(`üéØ Int√©r√™ts: ${userInterests.join(', ')}`);
        
        // G√©n√©rer les photos AI
        await createMultiplePhotos(user.id, firstName, lastName, gender, age, 3);
        
        console.log(`üéâ Profil ${firstName} ${lastName} termin√© avec photos AI !`);
        
      } catch (error) {
        console.error(`‚ùå Erreur profil ${i + 1}:`, error);
      }
      
      // Attendre entre chaque profil
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    console.log(`\nüéä G√©n√©ration termin√©e ! ${count} profils cr√©√©s avec photos AI de qualit√©.`);
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration:', error);
  }
}

// Lancer la g√©n√©ration
if (require.main === module) {
  const count = process.argv[2] ? parseInt(process.argv[2]) : 10;
  generateAIProfiles(count)
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('Erreur:', error);
      process.exit(1);
    });
}

export { generateAIProfiles };