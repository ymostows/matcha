import api from './api';

export interface ProfileData {
  biography?: string;
  age?: number;
  gender?: 'homme' | 'femme';
  sexual_orientation?: 'hetero' | 'homo' | 'bi';
  interests?: string[];
  city?: string;
}

export interface CompleteProfile extends ProfileData {
  id: number;
  user_id: number;
  fame_rating: number;
  created_at: string;
  updated_at: string;
  photos?: Array<{
    id: number;
    filename: string;
    is_profile_picture: boolean;
    upload_date: string;
  }>;
  // Donn√©es utilisateur
  username: string;
  first_name: string;
  last_name: string;
  last_seen: string;
}

export interface LikeHistoryItem {
  id: number;
  liker_id: number;
  created_at: string;
  username: string;
  first_name: string;
  last_name: string;
  age?: number;
  city?: string;
}

export interface VisitHistoryItem {
  id: number;
  visitor_id: number;
  visited_at: string;
  username: string;
  first_name: string;
  last_name: string;
  age?: number;
  city?: string;
}

// Types de r√©ponse API
interface ApiResponse<T> {
  success: boolean;
  message?: string;
  profile?: T;
  likes?: LikeHistoryItem[];
  visits?: VisitHistoryItem[];
  files?: string[];
  profiles?: CompleteProfile[];
}

// Interface pour les donn√©es utilisateur modifiables
export interface UserUpdateData {
  first_name: string;
  last_name: string;
  email: string;
}

// Interface pour les donn√©es de localisation
export interface LocationUpdateData {
  latitude: number;
  longitude: number;
  city?: string;
  address?: string;
}

export const profileApi = {
  // Obtenir le profil de l'utilisateur connect√©
  async getMyProfile(): Promise<CompleteProfile> {
    const response = await api.get<ApiResponse<CompleteProfile>>('/profile');
    if (!response.profile) throw new Error('Profil non trouv√©');
    return response.profile;
  },

  // Obtenir un profil public par ID
  async getProfile(userId: number): Promise<CompleteProfile> {
    const response = await api.get<ApiResponse<CompleteProfile>>(`/profile/${userId}`);
    if (!response.profile) throw new Error('Profil non trouv√©');
    return response.profile;
  },

  // Cr√©er ou mettre √† jour le profil
  async updateProfile(profileData: ProfileData): Promise<CompleteProfile> {
    const response = await api.put<ApiResponse<CompleteProfile>>('/profile', profileData);
    if (!response.profile) throw new Error('Erreur lors de la mise √† jour du profil');
    return response.profile;
  },

  // Mettre √† jour la g√©olocalisation
  async updateLocation(latitude: number, longitude: number, city?: string): Promise<void> {
    await api.put<ApiResponse<void>>('/profile/location', {
      latitude,
      longitude,
      city
    });
  },

  // Obtenir l'historique des likes re√ßus
  async getLikesHistory(limit: number = 20): Promise<LikeHistoryItem[]> {
    const response = await api.get<ApiResponse<LikeHistoryItem[]>>(`/profile/history/likes?limit=${limit}`);
    return response.likes || [];
  },

  // Obtenir l'historique des visites re√ßues
  async getVisitsHistory(limit: number = 20): Promise<VisitHistoryItem[]> {
    const response = await api.get<ApiResponse<VisitHistoryItem[]>>(`/profile/history/visits?limit=${limit}`);
    return response.visits || [];
  },



  // Rechercher des profils
  async searchProfiles(filters: {
    ageMin?: number;
    ageMax?: number;
    city?: string;
    interests?: string[];
    gender?: string;
    sexual_orientation?: string;
    limit?: number;
    offset?: number;
  }): Promise<CompleteProfile[]> {
    const params = new URLSearchParams();
    
    if (filters.ageMin !== undefined) params.append('ageMin', filters.ageMin.toString());
    if (filters.ageMax !== undefined) params.append('ageMax', filters.ageMax.toString());
    if (filters.city) params.append('city', filters.city);
    if (filters.interests?.length) params.append('interests', filters.interests.join(','));
    if (filters.gender) params.append('gender', filters.gender);
    if (filters.sexual_orientation) params.append('sexual_orientation', filters.sexual_orientation);
    if (filters.limit) params.append('limit', filters.limit.toString());
    if (filters.offset) params.append('offset', filters.offset.toString());

    const response = await api.get<ApiResponse<CompleteProfile[]>>(`/profile/search?${params.toString()}`);
    return response.profiles || [];
  },

  // Mettre √† jour les informations utilisateur (nom, pr√©nom, email)
  async updateUserInfo(userData: UserUpdateData): Promise<any> {
    const response = await api.put('/auth/user', userData);
    return response;
  },

  // Upload de photos en base64 (plus fiable)
  async uploadPhotos(files: File[]): Promise<any> {
    console.log('üì§ profileApi.uploadPhotos: D√©but avec', files.length, 'fichiers');
    
    const images = await Promise.all(
      Array.from(files).map((file, index) => {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => {
            const result = reader.result as string;
            const imageData = {
              base64: result,
              filename: file.name,
              type: file.type,
              size: file.size
            };
            console.log(`üìÑ Fichier ${index + 1}:`, {
              filename: imageData.filename,
              type: imageData.type,
              size: imageData.size,
              base64_start: imageData.base64.substring(0, 50) + '...',
              base64_length: imageData.base64.length
            });
            resolve(imageData);
          };
          reader.onerror = () => {
            reject(new Error(`Erreur lecture fichier ${file.name}`));
          };
          reader.readAsDataURL(file);
        });
      })
    );
    
    console.log('üì¶ Donn√©es √† envoyer:', {
      images_count: images.length,
      payload_size: JSON.stringify({ images }).length
    });
    
    try {
      const response = await api.post('/profile/photos', { images });
      console.log('üì• R√©ponse API re√ßue:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur API:', error);
      throw error;
    }
  },

  // Supprimer une photo
  async deletePhoto(photoId: number): Promise<any> {
    const response = await api.delete(`/profile/photos/${photoId}`);
    return response;
  },

  // D√©finir comme photo de profil
  async setProfilePicture(photoId: number): Promise<any> {
    const response = await api.put(`/profile/photos/${photoId}/profile-picture`);
    return response;
  },

  // G√©olocalisation automatique bas√©e sur l'IP
  async getIPLocation(): Promise<any> {
    try {
      const response = await api.get('/profile/location/ip');
      return response;
    } catch (error) {
      // Si l'API n'est pas disponible, utiliser un service public
      try {
        const fallbackResponse = await fetch('http://ip-api.com/json/');
        const data = await fallbackResponse.json();
        if (data.status === 'success') {
          return {
            latitude: data.lat,
            longitude: data.lon,
            city: data.city,
            country: data.country
          };
        }
      } catch (fallbackError) {
        console.error('Erreur service IP fallback:', fallbackError);
      }
      throw error;
    }
  },

  // G√©olocalisation automatique (m√©thode alternative)
  async getAutoLocation(): Promise<any> {
    const response = await api.post('/profile/location/auto');
    return response;
  },

  // Mise √† jour manuelle de la localisation
  async updateManualLocation(locationData: LocationUpdateData): Promise<any> {
    const response = await api.put('/profile/location/manual', locationData);
    return response;
  },

  // Liker un profil
  async likeProfile(userId: number): Promise<any> {
    const response = await api.post(`/profile/like/${userId}`);
    return response;
  },

  // Rejeter un profil
  async rejectProfile(userId: number): Promise<any> {
    const response = await api.post(`/profile/reject/${userId}`);
    return response;
  },

  // Annuler un like
  async unlikeProfile(userId: number): Promise<any> {
    const response = await api.delete(`/profile/like/${userId}`);
    return response;
  },
}; 